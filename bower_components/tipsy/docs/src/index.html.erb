       
<script type='text/javascript'>
  $(function() {
    
    $('#example-1').tipsy();
    
    $('#north').tipsy({gravity: 'n'});
    $('#south').tipsy({gravity: 's'});
    $('#east').tipsy({gravity: 'e'});
    $('#west').tipsy({gravity: 'w'});
    
    $('#auto-gravity').tipsy({gravity: $.fn.tipsy.autoNS});
    
    $('#example-fade').tipsy({fade: true});
    
    $('#example-custom-attribute').tipsy({title: 'id'});
    $('#example-callback').tipsy({title: function() { return this.getAttribute('original-title').toUpperCase(); } });
    $('#example-fallback').tipsy({fallback: "Where's my tooltip yo'?" });
    
    $('#example-html').tipsy({html: true });
    
  });
</script>

<h2 class='first' id='overview'>Overview</h2>

<p>Tipsy is a jQuery plugin for creating a Facebook-like tooltips effect based on
an anchor tag's title attribute.</p>

<h2 id='examples'>Examples &amp; Usage</h2>
  
<h3>Basic</h3>

<p>By default, tooltips will appear centred underneath their anchor:</p>

<p>
	<a id='example-1' href='#' title='Hello World'>Hover over me</a>
</p>

<div class='caption'>Basic example:</div>
<pre class='code'>$('#example-1').tipsy();</pre>

<h3>Gravities</h3>

<p>Using the gravity parameter, it's possible to control the positioning of the tooltip relative to the pointee:</p>

<table id='gravity' cellspacing='5'>
  <tr>
    <td>
      <a id='north' href='#' title='This is an example of north gravity'>North</a>
    </td>
    <td>
      <a id='south' href='#' title='This is an example of south gravity'>South</a>
    </td>
  </tr>
  <tr>
    <td>
      <a id='east' href='#' title='This is an example of east gravity'>East</a>
    </td>
    <td>
      <a id='west' href='#' title='This is an example of west gravity'>West</a>
    </td>
  </tr>
</table>

<div class='caption'>Gravity example:</div>
<pre class='code'>$('#foo').tipsy({gravity: 'n'}); // n | s | e | w</pre>

<p>As of version 0.1.3, it's possible to use a callback function to set the gravity dynamically at hover-time. Within the callback, <code>this</code> refers to the active element, and the function should return the calculated gravity as a string. Two demo callbacks are supplied - <code>$.fn.tipsy.autoNS</code> and <code>$.fn.tipsy.autoWE</code> - which select north/south and west/east gravity, respectively, based on the element's location in the viewport.</p>

<p>Here's an example (scroll the page to see the effect):</p>

<a id='auto-gravity' href='#' title='This as an example of dynamic gravity'>Dynamic Gravity</a>

<div class='caption'>Dynamic gravity example:</div>
<pre class='code'>$('#foo').tipsy({gravity: $.fn.tipsy.autoNS});</pre>

<h3>Fading</h3>

<p>For full Wob2.0 compliance, you must fade these badboys in:</p>

<p>
	<a id='example-fade' href='#' title='Hello World'>Hover over me</a>
</p>

<div class='caption'>Fade example:</div>
<pre class='code'>$('#example-fade').tipsy({fade: true});</pre>

<h3>Bonus Feature</h3>

<p>You can EVEN COMBINE FADE AND GRAVITY! (exercise for reader)</p>

<h3>Slightly Advanced Usage</h3>

<p>Tooltip text can be set based on any attribute, not just <code>title</code>:</p>

<p>
	<a id='example-custom-attribute' href='#' title='Hello World'>Hover over me</a>
</p>

<div class='caption'>Custom attribute example:</div>
<pre class='code'>$('#example-custom-attribute').tipsy({title: 'id'});</pre>

<p>If any attribute isn't good enough, you may pass a callback function instead. It should
  return the tooltip text for <code>this</code> element:</p>

<p>
	<a id='example-callback' href='#' title='Hello World'>Hover over me</a>
</p>

<div class='caption'>Callback example:</div>
<pre class='code'>$('#example-callback').tipsy({title: function() { return this.getAttribute('original-title').toUpperCase(); } });</pre>

<p>Finally, it is possible to specify a fallback tooltip for any element which does not
  have any tooltip text:</p>

<p>
	<a id='example-fallback' href='#'>Hover over me</a>
</p>

<div class='caption'>Fallback example:</div>
<pre class='code'>$('#example-fallback').tipsy({fallback: "Where's my tooltip yo'?" });</pre>

<p>If your tooltip content contains HTML, set the
  <code>html</code> option to <code>true</code> (relies on invalid HTML, sorry):</p>

<p>
	<a id='example-html' title='this <i>contains</i> <b>formatted</b> text' href='#'>Hover over me</a>
</p>

<div class='caption'>HTML example:</div>
<pre class='code'>$('#example-html').tipsy({html: true });</pre>


<h2 id='notes'>Notes</h2>

<p>Tipsy needs to erase any existing value for an element's <code>title</code> attribute in
  order to suppress the browser's native tooltips. It is stashed in the element's
  <code>original-title</code> attribute in case you need to retrieve it later.</p>
  
<p>As of version 0.1.4, the tooltip text is recomputed on every hover event so updating the
  <code>title</code> attribute will have the expected effect.</p>

<h2 id='download'>Download</h2>

<h3>Package</h3>

<p>
  Package downloads are available from the
  <a href='http://plugins.jquery.com/project/tipsy'>jQuery project page</a>.
</p>

<h3>github</h3>
<pre class='shell'><span class='green'>jason@donut</span> <span class='blue'>~ $</span> git clone git://github.com/jaz303/tipsy.git</pre>

